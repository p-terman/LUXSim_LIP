//
// File generated by rootcint at Tue Feb 23 11:40:11 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME BaccRootConverterEvent_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "BaccRootConverterEvent_dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::volumeInfo volumeInfo;
      #else
      class volumeInfo  {
         public:
         //friend XX;
         string sName; //
         int iVolumeID; //
         double dTotalEnergyDep_keV; //
         int iTotalOptPhotNumber; //
         int iTotalThermElecNumber; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::primaryParticleInfo primaryParticleInfo;
      #else
      class primaryParticleInfo  {
         public:
         //friend XX;
         string sName; //
         double dPosition_mm[3]; //
         double dDirection[3]; //
         double dEnergy_keV; //
         double dTime_ns; //
         string sVolumeName; //
         int iVolumeID; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::stepInfo stepInfo;
      #else
      class stepInfo  {
         public:
         //friend XX;
         int iStepNumber; //
         string sProcess; //
         string sVolumeName; //
         int iVolumeID; //
         double dPosition_mm[3]; //
         double dDirection[3]; //
         double dTime_ns; //
         double dParticleEnergy_keV; //
         double dEnergyDep_keV; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::trackInfo trackInfo;
      #else
      class trackInfo  {
         public:
         //friend XX;
         string sParticleName; //
         int iParticleID; //
         int iTrackID; //
         int iParentID; //
         string sCreatorProcess; //
         vector< ::stepInfo > steps; //
         double dWavelength_nm; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void volumeInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void volumeInfo_Dictionary();
   static void *new_volumeInfo(void *p = 0);
   static void *newArray_volumeInfo(Long_t size, void *p);
   static void delete_volumeInfo(void *p);
   static void deleteArray_volumeInfo(void *p);
   static void destruct_volumeInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::volumeInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::volumeInfo) == sizeof(::ROOT::Shadow::volumeInfo));
      ::volumeInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::volumeInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("volumeInfo", "./BaccRootConverterEvent.hh", 41,
                  typeid(::volumeInfo), DefineBehavior(ptr, ptr),
                  &volumeInfo_ShowMembers, &volumeInfo_Dictionary, isa_proxy, 4,
                  sizeof(::volumeInfo) );
      instance.SetNew(&new_volumeInfo);
      instance.SetNewArray(&newArray_volumeInfo);
      instance.SetDelete(&delete_volumeInfo);
      instance.SetDeleteArray(&deleteArray_volumeInfo);
      instance.SetDestructor(&destruct_volumeInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::volumeInfo*)
   {
      return GenerateInitInstanceLocal((::volumeInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::volumeInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void volumeInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::volumeInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void primaryParticleInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void primaryParticleInfo_Dictionary();
   static void *new_primaryParticleInfo(void *p = 0);
   static void *newArray_primaryParticleInfo(Long_t size, void *p);
   static void delete_primaryParticleInfo(void *p);
   static void deleteArray_primaryParticleInfo(void *p);
   static void destruct_primaryParticleInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::primaryParticleInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::primaryParticleInfo) == sizeof(::ROOT::Shadow::primaryParticleInfo));
      ::primaryParticleInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::primaryParticleInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("primaryParticleInfo", "./BaccRootConverterEvent.hh", 49,
                  typeid(::primaryParticleInfo), DefineBehavior(ptr, ptr),
                  &primaryParticleInfo_ShowMembers, &primaryParticleInfo_Dictionary, isa_proxy, 4,
                  sizeof(::primaryParticleInfo) );
      instance.SetNew(&new_primaryParticleInfo);
      instance.SetNewArray(&newArray_primaryParticleInfo);
      instance.SetDelete(&delete_primaryParticleInfo);
      instance.SetDeleteArray(&deleteArray_primaryParticleInfo);
      instance.SetDestructor(&destruct_primaryParticleInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::primaryParticleInfo*)
   {
      return GenerateInitInstanceLocal((::primaryParticleInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::primaryParticleInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void primaryParticleInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::primaryParticleInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void stepInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void stepInfo_Dictionary();
   static void *new_stepInfo(void *p = 0);
   static void *newArray_stepInfo(Long_t size, void *p);
   static void delete_stepInfo(void *p);
   static void deleteArray_stepInfo(void *p);
   static void destruct_stepInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::stepInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::stepInfo) == sizeof(::ROOT::Shadow::stepInfo));
      ::stepInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::stepInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("stepInfo", "./BaccRootConverterEvent.hh", 59,
                  typeid(::stepInfo), DefineBehavior(ptr, ptr),
                  &stepInfo_ShowMembers, &stepInfo_Dictionary, isa_proxy, 4,
                  sizeof(::stepInfo) );
      instance.SetNew(&new_stepInfo);
      instance.SetNewArray(&newArray_stepInfo);
      instance.SetDelete(&delete_stepInfo);
      instance.SetDeleteArray(&deleteArray_stepInfo);
      instance.SetDestructor(&destruct_stepInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::stepInfo*)
   {
      return GenerateInitInstanceLocal((::stepInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::stepInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void stepInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::stepInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void trackInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void trackInfo_Dictionary();
   static void *new_trackInfo(void *p = 0);
   static void *newArray_trackInfo(Long_t size, void *p);
   static void delete_trackInfo(void *p);
   static void deleteArray_trackInfo(void *p);
   static void destruct_trackInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::trackInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::trackInfo) == sizeof(::ROOT::Shadow::trackInfo));
      ::trackInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::trackInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("trackInfo", "./BaccRootConverterEvent.hh", 71,
                  typeid(::trackInfo), DefineBehavior(ptr, ptr),
                  &trackInfo_ShowMembers, &trackInfo_Dictionary, isa_proxy, 4,
                  sizeof(::trackInfo) );
      instance.SetNew(&new_trackInfo);
      instance.SetNewArray(&newArray_trackInfo);
      instance.SetDelete(&delete_trackInfo);
      instance.SetDeleteArray(&deleteArray_trackInfo);
      instance.SetDestructor(&destruct_trackInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::trackInfo*)
   {
      return GenerateInitInstanceLocal((::trackInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::trackInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void trackInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::trackInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void BaccRootConverterEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BaccRootConverterEvent(void *p = 0);
   static void *newArray_BaccRootConverterEvent(Long_t size, void *p);
   static void delete_BaccRootConverterEvent(void *p);
   static void deleteArray_BaccRootConverterEvent(void *p);
   static void destruct_BaccRootConverterEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::BaccRootConverterEvent*)
   {
      ::BaccRootConverterEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BaccRootConverterEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BaccRootConverterEvent", ::BaccRootConverterEvent::Class_Version(), "./BaccRootConverterEvent.hh", 82,
                  typeid(::BaccRootConverterEvent), DefineBehavior(ptr, ptr),
                  &::BaccRootConverterEvent::Dictionary, isa_proxy, 4,
                  sizeof(::BaccRootConverterEvent) );
      instance.SetNew(&new_BaccRootConverterEvent);
      instance.SetNewArray(&newArray_BaccRootConverterEvent);
      instance.SetDelete(&delete_BaccRootConverterEvent);
      instance.SetDeleteArray(&deleteArray_BaccRootConverterEvent);
      instance.SetDestructor(&destruct_BaccRootConverterEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::BaccRootConverterEvent*)
   {
      return GenerateInitInstanceLocal((::BaccRootConverterEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BaccRootConverterEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *BaccRootConverterEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *BaccRootConverterEvent::Class_Name()
{
   return "BaccRootConverterEvent";
}

//______________________________________________________________________________
const char *BaccRootConverterEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::BaccRootConverterEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BaccRootConverterEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::BaccRootConverterEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BaccRootConverterEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::BaccRootConverterEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BaccRootConverterEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::BaccRootConverterEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void BaccRootConverterEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class BaccRootConverterEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(BaccRootConverterEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(BaccRootConverterEvent::Class(),this);
   }
}

//______________________________________________________________________________
void BaccRootConverterEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BaccRootConverterEvent.
      TClass *R__cl = ::BaccRootConverterEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEventNumber", &iEventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "volumes", (void*)&volumes);
      R__insp.InspectMember("vector<volumeInfo>", (void*)&volumes, "volumes.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primaryParticles", (void*)&primaryParticles);
      R__insp.InspectMember("vector<primaryParticleInfo>", (void*)&primaryParticles, "primaryParticles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracks", (void*)&tracks);
      R__insp.InspectMember("vector<trackInfo>", (void*)&tracks, "tracks.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_BaccRootConverterEvent(void *p) {
      return  p ? new(p) ::BaccRootConverterEvent : new ::BaccRootConverterEvent;
   }
   static void *newArray_BaccRootConverterEvent(Long_t nElements, void *p) {
      return p ? new(p) ::BaccRootConverterEvent[nElements] : new ::BaccRootConverterEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_BaccRootConverterEvent(void *p) {
      delete ((::BaccRootConverterEvent*)p);
   }
   static void deleteArray_BaccRootConverterEvent(void *p) {
      delete [] ((::BaccRootConverterEvent*)p);
   }
   static void destruct_BaccRootConverterEvent(void *p) {
      typedef ::BaccRootConverterEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::BaccRootConverterEvent

//______________________________________________________________________________
namespace ROOT {
   void volumeInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class volumeInfo.
      typedef ::ROOT::Shadow::volumeInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::volumeInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sName", (void*)&sobj->sName);
      R__insp.InspectMember("string", (void*)&sobj->sName, "sName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iVolumeID", &sobj->iVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTotalEnergyDep_keV", &sobj->dTotalEnergyDep_keV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iTotalOptPhotNumber", &sobj->iTotalOptPhotNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iTotalThermElecNumber", &sobj->iTotalThermElecNumber);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_volumeInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::volumeInfo : new ::volumeInfo;
   }
   static void *newArray_volumeInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::volumeInfo[nElements] : new ::volumeInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_volumeInfo(void *p) {
      delete ((::volumeInfo*)p);
   }
   static void deleteArray_volumeInfo(void *p) {
      delete [] ((::volumeInfo*)p);
   }
   static void destruct_volumeInfo(void *p) {
      typedef ::volumeInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::volumeInfo

//______________________________________________________________________________
namespace ROOT {
   void primaryParticleInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class primaryParticleInfo.
      typedef ::ROOT::Shadow::primaryParticleInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::primaryParticleInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sName", (void*)&sobj->sName);
      R__insp.InspectMember("string", (void*)&sobj->sName, "sName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPosition_mm[3]", sobj->dPosition_mm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDirection[3]", sobj->dDirection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dEnergy_keV", &sobj->dEnergy_keV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTime_ns", &sobj->dTime_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sVolumeName", (void*)&sobj->sVolumeName);
      R__insp.InspectMember("string", (void*)&sobj->sVolumeName, "sVolumeName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iVolumeID", &sobj->iVolumeID);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_primaryParticleInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::primaryParticleInfo : new ::primaryParticleInfo;
   }
   static void *newArray_primaryParticleInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::primaryParticleInfo[nElements] : new ::primaryParticleInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_primaryParticleInfo(void *p) {
      delete ((::primaryParticleInfo*)p);
   }
   static void deleteArray_primaryParticleInfo(void *p) {
      delete [] ((::primaryParticleInfo*)p);
   }
   static void destruct_primaryParticleInfo(void *p) {
      typedef ::primaryParticleInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::primaryParticleInfo

//______________________________________________________________________________
namespace ROOT {
   void stepInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class stepInfo.
      typedef ::ROOT::Shadow::stepInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::stepInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iStepNumber", &sobj->iStepNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sProcess", (void*)&sobj->sProcess);
      R__insp.InspectMember("string", (void*)&sobj->sProcess, "sProcess.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sVolumeName", (void*)&sobj->sVolumeName);
      R__insp.InspectMember("string", (void*)&sobj->sVolumeName, "sVolumeName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iVolumeID", &sobj->iVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPosition_mm[3]", sobj->dPosition_mm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDirection[3]", sobj->dDirection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTime_ns", &sobj->dTime_ns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dParticleEnergy_keV", &sobj->dParticleEnergy_keV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dEnergyDep_keV", &sobj->dEnergyDep_keV);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_stepInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::stepInfo : new ::stepInfo;
   }
   static void *newArray_stepInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::stepInfo[nElements] : new ::stepInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_stepInfo(void *p) {
      delete ((::stepInfo*)p);
   }
   static void deleteArray_stepInfo(void *p) {
      delete [] ((::stepInfo*)p);
   }
   static void destruct_stepInfo(void *p) {
      typedef ::stepInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::stepInfo

//______________________________________________________________________________
namespace ROOT {
   void trackInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class trackInfo.
      typedef ::ROOT::Shadow::trackInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::trackInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sParticleName", (void*)&sobj->sParticleName);
      R__insp.InspectMember("string", (void*)&sobj->sParticleName, "sParticleName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iParticleID", &sobj->iParticleID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iTrackID", &sobj->iTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iParentID", &sobj->iParentID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sCreatorProcess", (void*)&sobj->sCreatorProcess);
      R__insp.InspectMember("string", (void*)&sobj->sCreatorProcess, "sCreatorProcess.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "steps", (void*)&sobj->steps);
      R__insp.InspectMember("vector<stepInfo>", (void*)&sobj->steps, "steps.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dWavelength_nm", &sobj->dWavelength_nm);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_trackInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::trackInfo : new ::trackInfo;
   }
   static void *newArray_trackInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::trackInfo[nElements] : new ::trackInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_trackInfo(void *p) {
      delete ((::trackInfo*)p);
   }
   static void deleteArray_trackInfo(void *p) {
      delete [] ((::trackInfo*)p);
   }
   static void destruct_trackInfo(void *p) {
      typedef ::trackInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::trackInfo

namespace ROOT {
   void vectorlEprimaryParticleInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEprimaryParticleInfogR_Dictionary();
   static void *new_vectorlEprimaryParticleInfogR(void *p = 0);
   static void *newArray_vectorlEprimaryParticleInfogR(Long_t size, void *p);
   static void delete_vectorlEprimaryParticleInfogR(void *p);
   static void deleteArray_vectorlEprimaryParticleInfogR(void *p);
   static void destruct_vectorlEprimaryParticleInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<primaryParticleInfo>*)
   {
      vector<primaryParticleInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<primaryParticleInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<primaryParticleInfo>", -2, "/usr/common/usg/software/ROOT/5.34.10//lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<primaryParticleInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEprimaryParticleInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<primaryParticleInfo>) );
      instance.SetNew(&new_vectorlEprimaryParticleInfogR);
      instance.SetNewArray(&newArray_vectorlEprimaryParticleInfogR);
      instance.SetDelete(&delete_vectorlEprimaryParticleInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEprimaryParticleInfogR);
      instance.SetDestructor(&destruct_vectorlEprimaryParticleInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<primaryParticleInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<primaryParticleInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEprimaryParticleInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<primaryParticleInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEprimaryParticleInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<primaryParticleInfo> : new vector<primaryParticleInfo>;
   }
   static void *newArray_vectorlEprimaryParticleInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<primaryParticleInfo>[nElements] : new vector<primaryParticleInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEprimaryParticleInfogR(void *p) {
      delete ((vector<primaryParticleInfo>*)p);
   }
   static void deleteArray_vectorlEprimaryParticleInfogR(void *p) {
      delete [] ((vector<primaryParticleInfo>*)p);
   }
   static void destruct_vectorlEprimaryParticleInfogR(void *p) {
      typedef vector<primaryParticleInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<primaryParticleInfo>

namespace ROOT {
   void vectorlEstepInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstepInfogR_Dictionary();
   static void *new_vectorlEstepInfogR(void *p = 0);
   static void *newArray_vectorlEstepInfogR(Long_t size, void *p);
   static void delete_vectorlEstepInfogR(void *p);
   static void deleteArray_vectorlEstepInfogR(void *p);
   static void destruct_vectorlEstepInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<stepInfo>*)
   {
      vector<stepInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<stepInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<stepInfo>", -2, "/usr/common/usg/software/ROOT/5.34.10//lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<stepInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstepInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<stepInfo>) );
      instance.SetNew(&new_vectorlEstepInfogR);
      instance.SetNewArray(&newArray_vectorlEstepInfogR);
      instance.SetDelete(&delete_vectorlEstepInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEstepInfogR);
      instance.SetDestructor(&destruct_vectorlEstepInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<stepInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<stepInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstepInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<stepInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstepInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<stepInfo> : new vector<stepInfo>;
   }
   static void *newArray_vectorlEstepInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<stepInfo>[nElements] : new vector<stepInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstepInfogR(void *p) {
      delete ((vector<stepInfo>*)p);
   }
   static void deleteArray_vectorlEstepInfogR(void *p) {
      delete [] ((vector<stepInfo>*)p);
   }
   static void destruct_vectorlEstepInfogR(void *p) {
      typedef vector<stepInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<stepInfo>

namespace ROOT {
   void vectorlEtrackInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtrackInfogR_Dictionary();
   static void *new_vectorlEtrackInfogR(void *p = 0);
   static void *newArray_vectorlEtrackInfogR(Long_t size, void *p);
   static void delete_vectorlEtrackInfogR(void *p);
   static void deleteArray_vectorlEtrackInfogR(void *p);
   static void destruct_vectorlEtrackInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<trackInfo>*)
   {
      vector<trackInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<trackInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<trackInfo>", -2, "/usr/common/usg/software/ROOT/5.34.10//lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<trackInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtrackInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<trackInfo>) );
      instance.SetNew(&new_vectorlEtrackInfogR);
      instance.SetNewArray(&newArray_vectorlEtrackInfogR);
      instance.SetDelete(&delete_vectorlEtrackInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEtrackInfogR);
      instance.SetDestructor(&destruct_vectorlEtrackInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<trackInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<trackInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtrackInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<trackInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtrackInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<trackInfo> : new vector<trackInfo>;
   }
   static void *newArray_vectorlEtrackInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<trackInfo>[nElements] : new vector<trackInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtrackInfogR(void *p) {
      delete ((vector<trackInfo>*)p);
   }
   static void deleteArray_vectorlEtrackInfogR(void *p) {
      delete [] ((vector<trackInfo>*)p);
   }
   static void destruct_vectorlEtrackInfogR(void *p) {
      typedef vector<trackInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<trackInfo>

namespace ROOT {
   void vectorlEvolumeInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvolumeInfogR_Dictionary();
   static void *new_vectorlEvolumeInfogR(void *p = 0);
   static void *newArray_vectorlEvolumeInfogR(Long_t size, void *p);
   static void delete_vectorlEvolumeInfogR(void *p);
   static void deleteArray_vectorlEvolumeInfogR(void *p);
   static void destruct_vectorlEvolumeInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<volumeInfo>*)
   {
      vector<volumeInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<volumeInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<volumeInfo>", -2, "/usr/common/usg/software/ROOT/5.34.10//lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<volumeInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEvolumeInfogR_Dictionary, isa_proxy, 4,
                  sizeof(vector<volumeInfo>) );
      instance.SetNew(&new_vectorlEvolumeInfogR);
      instance.SetNewArray(&newArray_vectorlEvolumeInfogR);
      instance.SetDelete(&delete_vectorlEvolumeInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEvolumeInfogR);
      instance.SetDestructor(&destruct_vectorlEvolumeInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<volumeInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<volumeInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvolumeInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<volumeInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvolumeInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<volumeInfo> : new vector<volumeInfo>;
   }
   static void *newArray_vectorlEvolumeInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<volumeInfo>[nElements] : new vector<volumeInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvolumeInfogR(void *p) {
      delete ((vector<volumeInfo>*)p);
   }
   static void deleteArray_vectorlEvolumeInfogR(void *p) {
      delete [] ((vector<volumeInfo>*)p);
   }
   static void destruct_vectorlEvolumeInfogR(void *p) {
      typedef vector<volumeInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<volumeInfo>

/********************************************************
* BaccRootConverterEvent_dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableBaccRootConverterEvent_dict();

extern "C" void G__set_cpp_environmentBaccRootConverterEvent_dict() {
  G__cpp_reset_tagtableBaccRootConverterEvent_dict();
}
#include <new>
extern "C" int G__cpp_dllrevBaccRootConverterEvent_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* volumeInfo */
// automatic default constructor
static int G__BaccRootConverterEvent_dict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   volumeInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new volumeInfo[n];
     } else {
       p = new((void*) gvp) volumeInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new volumeInfo;
     } else {
       p = new((void*) gvp) volumeInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaccRootConverterEvent_dict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   volumeInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new volumeInfo(*(volumeInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef volumeInfo G__TvolumeInfo;
static int G__BaccRootConverterEvent_dict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (volumeInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((volumeInfo*) (soff+(sizeof(volumeInfo)*i)))->~G__TvolumeInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (volumeInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((volumeInfo*) (soff))->~G__TvolumeInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaccRootConverterEvent_dict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   volumeInfo* dest = (volumeInfo*) G__getstructoffset();
   *dest = *(volumeInfo*) libp->para[0].ref;
   const volumeInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* primaryParticleInfo */
// automatic default constructor
static int G__BaccRootConverterEvent_dict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   primaryParticleInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new primaryParticleInfo[n];
     } else {
       p = new((void*) gvp) primaryParticleInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new primaryParticleInfo;
     } else {
       p = new((void*) gvp) primaryParticleInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaccRootConverterEvent_dict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   primaryParticleInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new primaryParticleInfo(*(primaryParticleInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef primaryParticleInfo G__TprimaryParticleInfo;
static int G__BaccRootConverterEvent_dict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (primaryParticleInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((primaryParticleInfo*) (soff+(sizeof(primaryParticleInfo)*i)))->~G__TprimaryParticleInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (primaryParticleInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((primaryParticleInfo*) (soff))->~G__TprimaryParticleInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaccRootConverterEvent_dict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   primaryParticleInfo* dest = (primaryParticleInfo*) G__getstructoffset();
   *dest = *(primaryParticleInfo*) libp->para[0].ref;
   const primaryParticleInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* stepInfo */
// automatic default constructor
static int G__BaccRootConverterEvent_dict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   stepInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new stepInfo[n];
     } else {
       p = new((void*) gvp) stepInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new stepInfo;
     } else {
       p = new((void*) gvp) stepInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaccRootConverterEvent_dict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   stepInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new stepInfo(*(stepInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef stepInfo G__TstepInfo;
static int G__BaccRootConverterEvent_dict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (stepInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((stepInfo*) (soff+(sizeof(stepInfo)*i)))->~G__TstepInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (stepInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((stepInfo*) (soff))->~G__TstepInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaccRootConverterEvent_dict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   stepInfo* dest = (stepInfo*) G__getstructoffset();
   *dest = *(stepInfo*) libp->para[0].ref;
   const stepInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* trackInfo */
// automatic default constructor
static int G__BaccRootConverterEvent_dict_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trackInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trackInfo[n];
     } else {
       p = new((void*) gvp) trackInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trackInfo;
     } else {
       p = new((void*) gvp) trackInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaccRootConverterEvent_dict_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   trackInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new trackInfo(*(trackInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef trackInfo G__TtrackInfo;
static int G__BaccRootConverterEvent_dict_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (trackInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((trackInfo*) (soff+(sizeof(trackInfo)*i)))->~G__TtrackInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (trackInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((trackInfo*) (soff))->~G__TtrackInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaccRootConverterEvent_dict_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trackInfo* dest = (trackInfo*) G__getstructoffset();
   *dest = *(trackInfo*) libp->para[0].ref;
   const trackInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<stepInfo,allocator<stepInfo> > */
static int G__BaccRootConverterEvent_dict_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<stepInfo,allocator<stepInfo> >::reference obj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->at((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::const_reference obj = ((const vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->at((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::iterator* pobj;
         vector<stepInfo,allocator<stepInfo> >::iterator xobj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<stepInfo,allocator<stepInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::iterator* pobj;
         vector<stepInfo,allocator<stepInfo> >::iterator xobj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->end();
         pobj = new vector<stepInfo,allocator<stepInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::reverse_iterator* pobj;
         vector<stepInfo,allocator<stepInfo> >::reverse_iterator xobj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<stepInfo,allocator<stepInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::reverse_iterator* pobj;
         vector<stepInfo,allocator<stepInfo> >::reverse_iterator xobj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<stepInfo,allocator<stepInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->resize((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->resize((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]), *((stepInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<stepInfo,allocator<stepInfo> >::reference obj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->operator[]((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::const_reference obj = ((const vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->operator[]((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<stepInfo,allocator<stepInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<stepInfo,allocator<stepInfo> >[n];
     } else {
       p = new((void*) gvp) vector<stepInfo,allocator<stepInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<stepInfo,allocator<stepInfo> >;
     } else {
       p = new((void*) gvp) vector<stepInfo,allocator<stepInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<stepInfo,allocator<stepInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<stepInfo,allocator<stepInfo> >((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]), *(stepInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<stepInfo,allocator<stepInfo> >((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]), *(stepInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<stepInfo,allocator<stepInfo> >((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<stepInfo,allocator<stepInfo> >((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<stepInfo,allocator<stepInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<stepInfo,allocator<stepInfo> >(*(vector<stepInfo,allocator<stepInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<stepInfo,allocator<stepInfo> >(*(vector<stepInfo,allocator<stepInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<stepInfo,allocator<stepInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<stepInfo,allocator<stepInfo> >(*((vector<stepInfo,allocator<stepInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<stepInfo,allocator<stepInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<stepInfo,allocator<stepInfo> >(*((vector<stepInfo,allocator<stepInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<stepInfo,allocator<stepInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<stepInfo,allocator<stepInfo> >& obj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->operator=(*(vector<stepInfo,allocator<stepInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->reserve((vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const stepInfo& obj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const stepInfo& obj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->push_back(*(stepInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->swap(*(vector<stepInfo,allocator<stepInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<stepInfo,allocator<stepInfo> >::iterator* pobj;
         vector<stepInfo,allocator<stepInfo> >::iterator xobj = ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->insert(*((vector<stepInfo,allocator<stepInfo> >::iterator*) G__int(libp->para[0])), *(stepInfo*) libp->para[1].ref);
         pobj = new vector<stepInfo,allocator<stepInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->insert(*((vector<stepInfo,allocator<stepInfo> >::iterator*) G__int(libp->para[0])), *((vector<stepInfo,allocator<stepInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<stepInfo,allocator<stepInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->insert(*((vector<stepInfo,allocator<stepInfo> >::iterator*) G__int(libp->para[0])), (vector<stepInfo,allocator<stepInfo> >::size_type) G__int(libp->para[1])
, *(stepInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->erase(*((vector<stepInfo,allocator<stepInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->erase(*((vector<stepInfo,allocator<stepInfo> >::iterator*) G__int(libp->para[0])), *((vector<stepInfo,allocator<stepInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_173_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<stepInfo,allocator<stepInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<stepInfo,allocator<stepInfo> > G__TvectorlEstepInfocOallocatorlEstepInfogRsPgR;
static int G__BaccRootConverterEvent_dict_173_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<stepInfo,allocator<stepInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<stepInfo,allocator<stepInfo> >*) (soff+(sizeof(vector<stepInfo,allocator<stepInfo> >)*i)))->~G__TvectorlEstepInfocOallocatorlEstepInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<stepInfo,allocator<stepInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<stepInfo,allocator<stepInfo> >*) (soff))->~G__TvectorlEstepInfocOallocatorlEstepInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BaccRootConverterEvent */
static int G__BaccRootConverterEvent_dict_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BaccRootConverterEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BaccRootConverterEvent[n];
     } else {
       p = new((void*) gvp) BaccRootConverterEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BaccRootConverterEvent;
     } else {
       p = new((void*) gvp) BaccRootConverterEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BaccRootConverterEvent*) G__getstructoffset())->ClearEverything();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BaccRootConverterEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BaccRootConverterEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BaccRootConverterEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BaccRootConverterEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BaccRootConverterEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BaccRootConverterEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BaccRootConverterEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BaccRootConverterEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BaccRootConverterEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaccRootConverterEvent_dict_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BaccRootConverterEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BaccRootConverterEvent(*(BaccRootConverterEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BaccRootConverterEvent G__TBaccRootConverterEvent;
static int G__BaccRootConverterEvent_dict_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BaccRootConverterEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BaccRootConverterEvent*) (soff+(sizeof(BaccRootConverterEvent)*i)))->~G__TBaccRootConverterEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BaccRootConverterEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BaccRootConverterEvent*) (soff))->~G__TBaccRootConverterEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaccRootConverterEvent_dict_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BaccRootConverterEvent* dest = (BaccRootConverterEvent*) G__getstructoffset();
   *dest = *(BaccRootConverterEvent*) libp->para[0].ref;
   const BaccRootConverterEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<volumeInfo,allocator<volumeInfo> > */
static int G__BaccRootConverterEvent_dict_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<volumeInfo,allocator<volumeInfo> >::reference obj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->at((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::const_reference obj = ((const vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->at((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::iterator* pobj;
         vector<volumeInfo,allocator<volumeInfo> >::iterator xobj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<volumeInfo,allocator<volumeInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::iterator* pobj;
         vector<volumeInfo,allocator<volumeInfo> >::iterator xobj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->end();
         pobj = new vector<volumeInfo,allocator<volumeInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator* pobj;
         vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator xobj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator* pobj;
         vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator xobj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->resize((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->resize((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]), *((volumeInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<volumeInfo,allocator<volumeInfo> >::reference obj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->operator[]((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::const_reference obj = ((const vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->operator[]((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<volumeInfo,allocator<volumeInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<volumeInfo,allocator<volumeInfo> >[n];
     } else {
       p = new((void*) gvp) vector<volumeInfo,allocator<volumeInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<volumeInfo,allocator<volumeInfo> >;
     } else {
       p = new((void*) gvp) vector<volumeInfo,allocator<volumeInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<volumeInfo,allocator<volumeInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<volumeInfo,allocator<volumeInfo> >((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]), *(volumeInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<volumeInfo,allocator<volumeInfo> >((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]), *(volumeInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<volumeInfo,allocator<volumeInfo> >((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<volumeInfo,allocator<volumeInfo> >((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<volumeInfo,allocator<volumeInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<volumeInfo,allocator<volumeInfo> >(*(vector<volumeInfo,allocator<volumeInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<volumeInfo,allocator<volumeInfo> >(*(vector<volumeInfo,allocator<volumeInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<volumeInfo,allocator<volumeInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<volumeInfo,allocator<volumeInfo> >(*((vector<volumeInfo,allocator<volumeInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<volumeInfo,allocator<volumeInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<volumeInfo,allocator<volumeInfo> >(*((vector<volumeInfo,allocator<volumeInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<volumeInfo,allocator<volumeInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<volumeInfo,allocator<volumeInfo> >& obj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->operator=(*(vector<volumeInfo,allocator<volumeInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->reserve((vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const volumeInfo& obj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const volumeInfo& obj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->push_back(*(volumeInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->swap(*(vector<volumeInfo,allocator<volumeInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<volumeInfo,allocator<volumeInfo> >::iterator* pobj;
         vector<volumeInfo,allocator<volumeInfo> >::iterator xobj = ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->insert(*((vector<volumeInfo,allocator<volumeInfo> >::iterator*) G__int(libp->para[0])), *(volumeInfo*) libp->para[1].ref);
         pobj = new vector<volumeInfo,allocator<volumeInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->insert(*((vector<volumeInfo,allocator<volumeInfo> >::iterator*) G__int(libp->para[0])), *((vector<volumeInfo,allocator<volumeInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<volumeInfo,allocator<volumeInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->insert(*((vector<volumeInfo,allocator<volumeInfo> >::iterator*) G__int(libp->para[0])), (vector<volumeInfo,allocator<volumeInfo> >::size_type) G__int(libp->para[1])
, *(volumeInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->erase(*((vector<volumeInfo,allocator<volumeInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->erase(*((vector<volumeInfo,allocator<volumeInfo> >::iterator*) G__int(libp->para[0])), *((vector<volumeInfo,allocator<volumeInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_178_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<volumeInfo,allocator<volumeInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<volumeInfo,allocator<volumeInfo> > G__TvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR;
static int G__BaccRootConverterEvent_dict_178_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<volumeInfo,allocator<volumeInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<volumeInfo,allocator<volumeInfo> >*) (soff+(sizeof(vector<volumeInfo,allocator<volumeInfo> >)*i)))->~G__TvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<volumeInfo,allocator<volumeInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<volumeInfo,allocator<volumeInfo> >*) (soff))->~G__TvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<primaryParticleInfo,allocator<primaryParticleInfo> > */
static int G__BaccRootConverterEvent_dict_182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reference obj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->at((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_reference obj = ((const vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->at((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator* pobj;
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator xobj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator* pobj;
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator xobj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->end();
         pobj = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator* pobj;
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator xobj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator* pobj;
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator xobj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->resize((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->resize((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]), *((primaryParticleInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reference obj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->operator[]((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_reference obj = ((const vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->operator[]((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<primaryParticleInfo,allocator<primaryParticleInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >[n];
     } else {
       p = new((void*) gvp) vector<primaryParticleInfo,allocator<primaryParticleInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >;
     } else {
       p = new((void*) gvp) vector<primaryParticleInfo,allocator<primaryParticleInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<primaryParticleInfo,allocator<primaryParticleInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]), *(primaryParticleInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<primaryParticleInfo,allocator<primaryParticleInfo> >((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]), *(primaryParticleInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<primaryParticleInfo,allocator<primaryParticleInfo> >((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<primaryParticleInfo,allocator<primaryParticleInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >(*(vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<primaryParticleInfo,allocator<primaryParticleInfo> >(*(vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<primaryParticleInfo,allocator<primaryParticleInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<primaryParticleInfo,allocator<primaryParticleInfo> >(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<primaryParticleInfo,allocator<primaryParticleInfo> >& obj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->operator=(*(vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->reserve((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const primaryParticleInfo& obj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const primaryParticleInfo& obj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->push_back(*(primaryParticleInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->swap(*(vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator* pobj;
         vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator xobj = ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->insert(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator*) G__int(libp->para[0])), *(primaryParticleInfo*) libp->para[1].ref);
         pobj = new vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->insert(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator*) G__int(libp->para[0])), *((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->insert(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator*) G__int(libp->para[0])), (vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type) G__int(libp->para[1])
, *(primaryParticleInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->erase(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->erase(*((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator*) G__int(libp->para[0])), *((vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_182_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<primaryParticleInfo,allocator<primaryParticleInfo> > G__TvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR;
static int G__BaccRootConverterEvent_dict_182_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) (soff+(sizeof(vector<primaryParticleInfo,allocator<primaryParticleInfo> >)*i)))->~G__TvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<primaryParticleInfo,allocator<primaryParticleInfo> >*) (soff))->~G__TvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<trackInfo,allocator<trackInfo> > */
static int G__BaccRootConverterEvent_dict_186_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<trackInfo,allocator<trackInfo> >::reference obj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->at((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::const_reference obj = ((const vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->at((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::iterator* pobj;
         vector<trackInfo,allocator<trackInfo> >::iterator xobj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->begin();
         pobj = new vector<trackInfo,allocator<trackInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::iterator* pobj;
         vector<trackInfo,allocator<trackInfo> >::iterator xobj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->end();
         pobj = new vector<trackInfo,allocator<trackInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::reverse_iterator* pobj;
         vector<trackInfo,allocator<trackInfo> >::reverse_iterator xobj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->rbegin();
         pobj = new vector<trackInfo,allocator<trackInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::reverse_iterator* pobj;
         vector<trackInfo,allocator<trackInfo> >::reverse_iterator xobj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->rend();
         pobj = new vector<trackInfo,allocator<trackInfo> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->resize((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->resize((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]), *((trackInfo*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<trackInfo,allocator<trackInfo> >::reference obj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->operator[]((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::const_reference obj = ((const vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->operator[]((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackInfo,allocator<trackInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackInfo,allocator<trackInfo> >[n];
     } else {
       p = new((void*) gvp) vector<trackInfo,allocator<trackInfo> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackInfo,allocator<trackInfo> >;
     } else {
       p = new((void*) gvp) vector<trackInfo,allocator<trackInfo> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackInfo,allocator<trackInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackInfo,allocator<trackInfo> >((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]), *(trackInfo*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<trackInfo,allocator<trackInfo> >((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]), *(trackInfo*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackInfo,allocator<trackInfo> >((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<trackInfo,allocator<trackInfo> >((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackInfo,allocator<trackInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<trackInfo,allocator<trackInfo> >(*(vector<trackInfo,allocator<trackInfo> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<trackInfo,allocator<trackInfo> >(*(vector<trackInfo,allocator<trackInfo> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackInfo,allocator<trackInfo> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<trackInfo,allocator<trackInfo> >(*((vector<trackInfo,allocator<trackInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<trackInfo,allocator<trackInfo> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<trackInfo,allocator<trackInfo> >(*((vector<trackInfo,allocator<trackInfo> >::const_iterator*) G__int(libp->para[0])), *((vector<trackInfo,allocator<trackInfo> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<trackInfo,allocator<trackInfo> >& obj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->operator=(*(vector<trackInfo,allocator<trackInfo> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->reserve((vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const trackInfo& obj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const trackInfo& obj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->push_back(*(trackInfo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->swap(*(vector<trackInfo,allocator<trackInfo> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackInfo,allocator<trackInfo> >::iterator* pobj;
         vector<trackInfo,allocator<trackInfo> >::iterator xobj = ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->insert(*((vector<trackInfo,allocator<trackInfo> >::iterator*) G__int(libp->para[0])), *(trackInfo*) libp->para[1].ref);
         pobj = new vector<trackInfo,allocator<trackInfo> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->insert(*((vector<trackInfo,allocator<trackInfo> >::iterator*) G__int(libp->para[0])), *((vector<trackInfo,allocator<trackInfo> >::const_iterator*) G__int(libp->para[1]))
, *((vector<trackInfo,allocator<trackInfo> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->insert(*((vector<trackInfo,allocator<trackInfo> >::iterator*) G__int(libp->para[0])), (vector<trackInfo,allocator<trackInfo> >::size_type) G__int(libp->para[1])
, *(trackInfo*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->erase(*((vector<trackInfo,allocator<trackInfo> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->erase(*((vector<trackInfo,allocator<trackInfo> >::iterator*) G__int(libp->para[0])), *((vector<trackInfo,allocator<trackInfo> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaccRootConverterEvent_dict_186_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackInfo,allocator<trackInfo> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<trackInfo,allocator<trackInfo> > G__TvectorlEtrackInfocOallocatorlEtrackInfogRsPgR;
static int G__BaccRootConverterEvent_dict_186_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<trackInfo,allocator<trackInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<trackInfo,allocator<trackInfo> >*) (soff+(sizeof(vector<trackInfo,allocator<trackInfo> >)*i)))->~G__TvectorlEtrackInfocOallocatorlEtrackInfogRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<trackInfo,allocator<trackInfo> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<trackInfo,allocator<trackInfo> >*) (soff))->~G__TvectorlEtrackInfocOallocatorlEtrackInfogRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* volumeInfo */

/* primaryParticleInfo */

/* stepInfo */

/* trackInfo */

/* vector<stepInfo,allocator<stepInfo> > */

/* BaccRootConverterEvent */

/* vector<volumeInfo,allocator<volumeInfo> > */

/* vector<primaryParticleInfo,allocator<primaryParticleInfo> > */

/* vector<trackInfo,allocator<trackInfo> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncBaccRootConverterEvent_dict {
 public:
  G__Sizep2memfuncBaccRootConverterEvent_dict(): p(&G__Sizep2memfuncBaccRootConverterEvent_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncBaccRootConverterEvent_dict::*p)();
};

size_t G__get_sizep2memfuncBaccRootConverterEvent_dict()
{
  G__Sizep2memfuncBaccRootConverterEvent_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceBaccRootConverterEvent_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent))) {
     BaccRootConverterEvent *G__Lderived;
     G__Lderived=(BaccRootConverterEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent),G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableBaccRootConverterEvent_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<stepInfo>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo),1,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo),257,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<volumeInfo>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo),1,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo),257,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<primaryParticleInfo>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo),1,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo),257,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<trackInfo>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo),1,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo),257,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* volumeInfo */
static void G__setup_memvarvolumeInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo));
   { volumeInfo *p; p=(volumeInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iVolumeID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iVolumeID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dTotalEnergyDep_keV)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dTotalEnergyDep_keV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iTotalOptPhotNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iTotalOptPhotNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iTotalThermElecNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iTotalThermElecNumber=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* primaryParticleInfo */
static void G__setup_memvarprimaryParticleInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo));
   { primaryParticleInfo *p; p=(primaryParticleInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPosition_mm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dPosition_mm[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dDirection)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dDirection[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dEnergy_keV)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dEnergy_keV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dTime_ns)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dTime_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sVolumeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sVolumeName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iVolumeID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iVolumeID=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* stepInfo */
static void G__setup_memvarstepInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo));
   { stepInfo *p; p=(stepInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iStepNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iStepNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sProcess)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sProcess=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sVolumeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sVolumeName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iVolumeID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iVolumeID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPosition_mm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dPosition_mm[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dDirection)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dDirection[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dTime_ns)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dTime_ns=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dParticleEnergy_keV)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dParticleEnergy_keV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dEnergyDep_keV)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dEnergyDep_keV=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* trackInfo */
static void G__setup_memvartrackInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo));
   { trackInfo *p; p=(trackInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sParticleName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sParticleName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iParticleID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iParticleID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iTrackID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iTrackID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iParentID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iParentID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sCreatorProcess)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_string),-1,-1,1,"sCreatorProcess=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->steps)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR),G__defined_typename("vector<stepInfo>"),-1,1,"steps=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dWavelength_nm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dWavelength_nm=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<stepInfo,allocator<stepInfo> > */
static void G__setup_memvarvectorlEstepInfocOallocatorlEstepInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   { vector<stepInfo,allocator<stepInfo> > *p; p=(vector<stepInfo,allocator<stepInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* BaccRootConverterEvent */
static void G__setup_memvarBaccRootConverterEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent));
   { BaccRootConverterEvent *p; p=(BaccRootConverterEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iEventNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iEventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->volumes)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR),G__defined_typename("vector<volumeInfo>"),-1,1,"volumes=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaryParticles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR),G__defined_typename("vector<primaryParticleInfo>"),-1,1,"primaryParticles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR),G__defined_typename("vector<trackInfo>"),-1,1,"tracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<volumeInfo,allocator<volumeInfo> > */
static void G__setup_memvarvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   { vector<volumeInfo,allocator<volumeInfo> > *p; p=(vector<volumeInfo,allocator<volumeInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<primaryParticleInfo,allocator<primaryParticleInfo> > */
static void G__setup_memvarvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   { vector<primaryParticleInfo,allocator<primaryParticleInfo> > *p; p=(vector<primaryParticleInfo,allocator<primaryParticleInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<trackInfo,allocator<trackInfo> > */
static void G__setup_memvarvectorlEtrackInfocOallocatorlEtrackInfogRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   { vector<trackInfo,allocator<trackInfo> > *p; p=(vector<trackInfo,allocator<trackInfo> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarBaccRootConverterEvent_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncvolumeInfo(void) {
   /* volumeInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo));
   // automatic default constructor
   G__memfunc_setup("volumeInfo", 1060, G__BaccRootConverterEvent_dict_168_0_1, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("volumeInfo", 1060, G__BaccRootConverterEvent_dict_168_0_2, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), -1, 0, 1, 1, 1, 0, "u 'volumeInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~volumeInfo", 1186, G__BaccRootConverterEvent_dict_168_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaccRootConverterEvent_dict_168_0_4, (int) ('u'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), -1, 1, 1, 1, 1, 0, "u 'volumeInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncprimaryParticleInfo(void) {
   /* primaryParticleInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo));
   // automatic default constructor
   G__memfunc_setup("primaryParticleInfo", 1988, G__BaccRootConverterEvent_dict_169_0_1, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("primaryParticleInfo", 1988, G__BaccRootConverterEvent_dict_169_0_2, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), -1, 0, 1, 1, 1, 0, "u 'primaryParticleInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~primaryParticleInfo", 2114, G__BaccRootConverterEvent_dict_169_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaccRootConverterEvent_dict_169_0_4, (int) ('u'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), -1, 1, 1, 1, 1, 0, "u 'primaryParticleInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncstepInfo(void) {
   /* stepInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo));
   // automatic default constructor
   G__memfunc_setup("stepInfo", 840, G__BaccRootConverterEvent_dict_170_0_1, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("stepInfo", 840, G__BaccRootConverterEvent_dict_170_0_2, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), -1, 0, 1, 1, 1, 0, "u 'stepInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~stepInfo", 966, G__BaccRootConverterEvent_dict_170_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaccRootConverterEvent_dict_170_0_4, (int) ('u'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), -1, 1, 1, 1, 1, 0, "u 'stepInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctrackInfo(void) {
   /* trackInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo));
   // automatic default constructor
   G__memfunc_setup("trackInfo", 929, G__BaccRootConverterEvent_dict_171_0_1, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("trackInfo", 929, G__BaccRootConverterEvent_dict_171_0_2, (int) ('i'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), -1, 0, 1, 1, 1, 0, "u 'trackInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~trackInfo", 1055, G__BaccRootConverterEvent_dict_171_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaccRootConverterEvent_dict_171_0_4, (int) ('u'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), -1, 1, 1, 1, 1, 0, "u 'trackInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEstepInfocOallocatorlEstepInfogRsPgR(void) {
   /* vector<stepInfo,allocator<stepInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR));
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_173_0_1, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), G__defined_typename("vector<stepInfo,allocator<stepInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_173_0_2, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), G__defined_typename("vector<stepInfo,allocator<stepInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__BaccRootConverterEvent_dict_173_0_3, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__BaccRootConverterEvent_dict_173_0_4, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__BaccRootConverterEvent_dict_173_0_5, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<stepInfo,allocator<stepInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__BaccRootConverterEvent_dict_173_0_6, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<stepInfo,allocator<stepInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__BaccRootConverterEvent_dict_173_0_7, 107, -1, G__defined_typename("vector<stepInfo,allocator<stepInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__BaccRootConverterEvent_dict_173_0_8, 107, -1, G__defined_typename("vector<stepInfo,allocator<stepInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_173_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_173_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - sz u 'stepInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__BaccRootConverterEvent_dict_173_0_11, 107, -1, G__defined_typename("vector<stepInfo,allocator<stepInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__BaccRootConverterEvent_dict_173_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_173_0_13, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), G__defined_typename("vector<stepInfo,allocator<stepInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_173_0_14, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), G__defined_typename("vector<stepInfo,allocator<stepInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<stepInfo,allocator<stepInfo> >",3620,G__BaccRootConverterEvent_dict_173_0_15, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<stepInfo,allocator<stepInfo> >",3620,G__BaccRootConverterEvent_dict_173_0_16, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n u 'stepInfo' - 11 'stepInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<stepInfo,allocator<stepInfo> >",3620,G__BaccRootConverterEvent_dict_173_0_17, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<stepInfo,allocator<stepInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<stepInfo,allocator<stepInfo> >",3620,G__BaccRootConverterEvent_dict_173_0_18, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<stepInfo,allocator<stepInfo> >::iterator' 'vector<stepInfo,allocator<stepInfo> >::const_iterator' 10 - first u 'vector<stepInfo,allocator<stepInfo> >::iterator' 'vector<stepInfo,allocator<stepInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__BaccRootConverterEvent_dict_173_0_19, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<stepInfo,allocator<stepInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__BaccRootConverterEvent_dict_173_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__BaccRootConverterEvent_dict_173_0_21, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__BaccRootConverterEvent_dict_173_0_22, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_stepInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__BaccRootConverterEvent_dict_173_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'stepInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__BaccRootConverterEvent_dict_173_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<stepInfo,allocator<stepInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_173_0_25, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<stepInfo,allocator<stepInfo> >::iterator' - 0 - position u 'stepInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_173_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<stepInfo,allocator<stepInfo> >::iterator' - 0 - position u 'vector<stepInfo,allocator<stepInfo> >::iterator' 'vector<stepInfo,allocator<stepInfo> >::const_iterator' 10 - first "
"u 'vector<stepInfo,allocator<stepInfo> >::iterator' 'vector<stepInfo,allocator<stepInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_173_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<stepInfo,allocator<stepInfo> >::iterator' - 0 - position k - 'vector<stepInfo,allocator<stepInfo> >::size_type' 0 - n "
"u 'stepInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__BaccRootConverterEvent_dict_173_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_173_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<stepInfo,allocator<stepInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_173_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<stepInfo,allocator<stepInfo> >::iterator' - 0 - first u 'vector<stepInfo,allocator<stepInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__BaccRootConverterEvent_dict_173_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<stepInfo,allocator<stepInfo> >", 3746, G__BaccRootConverterEvent_dict_173_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBaccRootConverterEvent(void) {
   /* BaccRootConverterEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent));
   G__memfunc_setup("BaccRootConverterEvent",2247,G__BaccRootConverterEvent_dict_176_0_1, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEverything",1548,G__BaccRootConverterEvent_dict_176_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaccRootConverterEvent_dict_176_0_3, 85, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BaccRootConverterEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaccRootConverterEvent_dict_176_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BaccRootConverterEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaccRootConverterEvent_dict_176_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BaccRootConverterEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaccRootConverterEvent_dict_176_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BaccRootConverterEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaccRootConverterEvent_dict_176_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaccRootConverterEvent_dict_176_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BaccRootConverterEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaccRootConverterEvent_dict_176_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BaccRootConverterEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaccRootConverterEvent_dict_176_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BaccRootConverterEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaccRootConverterEvent_dict_176_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BaccRootConverterEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BaccRootConverterEvent", 2247, G__BaccRootConverterEvent_dict_176_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent), -1, 0, 1, 1, 1, 0, "u 'BaccRootConverterEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BaccRootConverterEvent", 2373, G__BaccRootConverterEvent_dict_176_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaccRootConverterEvent_dict_176_0_17, (int) ('u'), G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent), -1, 1, 1, 1, 1, 0, "u 'BaccRootConverterEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR(void) {
   /* vector<volumeInfo,allocator<volumeInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR));
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_178_0_1, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_178_0_2, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__BaccRootConverterEvent_dict_178_0_3, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__BaccRootConverterEvent_dict_178_0_4, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__BaccRootConverterEvent_dict_178_0_5, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__BaccRootConverterEvent_dict_178_0_6, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__BaccRootConverterEvent_dict_178_0_7, 107, -1, G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__BaccRootConverterEvent_dict_178_0_8, 107, -1, G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_178_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_178_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - sz u 'volumeInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__BaccRootConverterEvent_dict_178_0_11, 107, -1, G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__BaccRootConverterEvent_dict_178_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_178_0_13, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_178_0_14, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), G__defined_typename("vector<volumeInfo,allocator<volumeInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<volumeInfo,allocator<volumeInfo> >",4060,G__BaccRootConverterEvent_dict_178_0_15, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<volumeInfo,allocator<volumeInfo> >",4060,G__BaccRootConverterEvent_dict_178_0_16, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n u 'volumeInfo' - 11 'volumeInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<volumeInfo,allocator<volumeInfo> >",4060,G__BaccRootConverterEvent_dict_178_0_17, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<volumeInfo,allocator<volumeInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<volumeInfo,allocator<volumeInfo> >",4060,G__BaccRootConverterEvent_dict_178_0_18, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' 'vector<volumeInfo,allocator<volumeInfo> >::const_iterator' 10 - first u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' 'vector<volumeInfo,allocator<volumeInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__BaccRootConverterEvent_dict_178_0_19, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<volumeInfo,allocator<volumeInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__BaccRootConverterEvent_dict_178_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__BaccRootConverterEvent_dict_178_0_21, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__BaccRootConverterEvent_dict_178_0_22, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_volumeInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__BaccRootConverterEvent_dict_178_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'volumeInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__BaccRootConverterEvent_dict_178_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<volumeInfo,allocator<volumeInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_178_0_25, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' - 0 - position u 'volumeInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_178_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' - 0 - position u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' 'vector<volumeInfo,allocator<volumeInfo> >::const_iterator' 10 - first "
"u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' 'vector<volumeInfo,allocator<volumeInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_178_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' - 0 - position k - 'vector<volumeInfo,allocator<volumeInfo> >::size_type' 0 - n "
"u 'volumeInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__BaccRootConverterEvent_dict_178_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_178_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_178_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' - 0 - first u 'vector<volumeInfo,allocator<volumeInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__BaccRootConverterEvent_dict_178_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<volumeInfo,allocator<volumeInfo> >", 4186, G__BaccRootConverterEvent_dict_178_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR(void) {
   /* vector<primaryParticleInfo,allocator<primaryParticleInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR));
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_182_0_1, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_182_0_2, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__BaccRootConverterEvent_dict_182_0_3, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__BaccRootConverterEvent_dict_182_0_4, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__BaccRootConverterEvent_dict_182_0_5, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__BaccRootConverterEvent_dict_182_0_6, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__BaccRootConverterEvent_dict_182_0_7, 107, -1, G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__BaccRootConverterEvent_dict_182_0_8, 107, -1, G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_182_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_182_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - sz u 'primaryParticleInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__BaccRootConverterEvent_dict_182_0_11, 107, -1, G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__BaccRootConverterEvent_dict_182_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_182_0_13, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_182_0_14, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), G__defined_typename("vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<primaryParticleInfo,allocator<primaryParticleInfo> >",5916,G__BaccRootConverterEvent_dict_182_0_15, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<primaryParticleInfo,allocator<primaryParticleInfo> >",5916,G__BaccRootConverterEvent_dict_182_0_16, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n u 'primaryParticleInfo' - 11 'primaryParticleInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<primaryParticleInfo,allocator<primaryParticleInfo> >",5916,G__BaccRootConverterEvent_dict_182_0_17, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<primaryParticleInfo,allocator<primaryParticleInfo> >",5916,G__BaccRootConverterEvent_dict_182_0_18, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator' 10 - first u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__BaccRootConverterEvent_dict_182_0_19, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__BaccRootConverterEvent_dict_182_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__BaccRootConverterEvent_dict_182_0_21, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__BaccRootConverterEvent_dict_182_0_22, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__BaccRootConverterEvent_dict_182_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'primaryParticleInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__BaccRootConverterEvent_dict_182_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_182_0_25, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' - 0 - position u 'primaryParticleInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_182_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' - 0 - position u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator' 10 - first "
"u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_182_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' - 0 - position k - 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::size_type' 0 - n "
"u 'primaryParticleInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__BaccRootConverterEvent_dict_182_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_182_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_182_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' - 0 - first u 'vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__BaccRootConverterEvent_dict_182_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<primaryParticleInfo,allocator<primaryParticleInfo> >", 6042, G__BaccRootConverterEvent_dict_182_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtrackInfocOallocatorlEtrackInfogRsPgR(void) {
   /* vector<trackInfo,allocator<trackInfo> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR));
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_186_0_1, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), G__defined_typename("vector<trackInfo,allocator<trackInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__BaccRootConverterEvent_dict_186_0_2, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), G__defined_typename("vector<trackInfo,allocator<trackInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__BaccRootConverterEvent_dict_186_0_3, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__BaccRootConverterEvent_dict_186_0_4, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__BaccRootConverterEvent_dict_186_0_5, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<trackInfo,allocator<trackInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__BaccRootConverterEvent_dict_186_0_6, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR), G__defined_typename("vector<trackInfo,allocator<trackInfo> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__BaccRootConverterEvent_dict_186_0_7, 107, -1, G__defined_typename("vector<trackInfo,allocator<trackInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__BaccRootConverterEvent_dict_186_0_8, 107, -1, G__defined_typename("vector<trackInfo,allocator<trackInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_186_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__BaccRootConverterEvent_dict_186_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - sz u 'trackInfo' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__BaccRootConverterEvent_dict_186_0_11, 107, -1, G__defined_typename("vector<trackInfo,allocator<trackInfo> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__BaccRootConverterEvent_dict_186_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_186_0_13, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), G__defined_typename("vector<trackInfo,allocator<trackInfo> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__BaccRootConverterEvent_dict_186_0_14, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), G__defined_typename("vector<trackInfo,allocator<trackInfo> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackInfo,allocator<trackInfo> >",3798,G__BaccRootConverterEvent_dict_186_0_15, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackInfo,allocator<trackInfo> >",3798,G__BaccRootConverterEvent_dict_186_0_16, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n u 'trackInfo' - 11 'trackInfo()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackInfo,allocator<trackInfo> >",3798,G__BaccRootConverterEvent_dict_186_0_17, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<trackInfo,allocator<trackInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackInfo,allocator<trackInfo> >",3798,G__BaccRootConverterEvent_dict_186_0_18, 105, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<trackInfo,allocator<trackInfo> >::iterator' 'vector<trackInfo,allocator<trackInfo> >::const_iterator' 10 - first u 'vector<trackInfo,allocator<trackInfo> >::iterator' 'vector<trackInfo,allocator<trackInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__BaccRootConverterEvent_dict_186_0_19, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<trackInfo,allocator<trackInfo> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__BaccRootConverterEvent_dict_186_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__BaccRootConverterEvent_dict_186_0_21, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__BaccRootConverterEvent_dict_186_0_22, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_trackInfo), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__BaccRootConverterEvent_dict_186_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'trackInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__BaccRootConverterEvent_dict_186_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<trackInfo,allocator<trackInfo> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_186_0_25, 117, G__get_linked_tagnum(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<trackInfo,allocator<trackInfo> >::iterator' - 0 - position u 'trackInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_186_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<trackInfo,allocator<trackInfo> >::iterator' - 0 - position u 'vector<trackInfo,allocator<trackInfo> >::iterator' 'vector<trackInfo,allocator<trackInfo> >::const_iterator' 10 - first "
"u 'vector<trackInfo,allocator<trackInfo> >::iterator' 'vector<trackInfo,allocator<trackInfo> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__BaccRootConverterEvent_dict_186_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<trackInfo,allocator<trackInfo> >::iterator' - 0 - position k - 'vector<trackInfo,allocator<trackInfo> >::size_type' 0 - n "
"u 'trackInfo' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__BaccRootConverterEvent_dict_186_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_186_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<trackInfo,allocator<trackInfo> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__BaccRootConverterEvent_dict_186_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<trackInfo,allocator<trackInfo> >::iterator' - 0 - first u 'vector<trackInfo,allocator<trackInfo> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__BaccRootConverterEvent_dict_186_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<trackInfo,allocator<trackInfo> >", 3924, G__BaccRootConverterEvent_dict_186_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncBaccRootConverterEvent_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalBaccRootConverterEvent_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcBaccRootConverterEvent_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__BaccRootConverterEvent_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_volumeInfo = { "volumeInfo" , 115 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_primaryParticleInfo = { "primaryParticleInfo" , 115 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_stepInfo = { "stepInfo" , 115 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_trackInfo = { "trackInfo" , 115 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR = { "vector<stepInfo,allocator<stepInfo> >" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator = { "vector<stepInfo,allocator<stepInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<stepInfo,allocator<stepInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent = { "BaccRootConverterEvent" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR = { "vector<volumeInfo,allocator<volumeInfo> >" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator = { "vector<volumeInfo,allocator<volumeInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<volumeInfo,allocator<volumeInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR = { "vector<primaryParticleInfo,allocator<primaryParticleInfo> >" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator = { "vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<primaryParticleInfo,allocator<primaryParticleInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR = { "vector<trackInfo,allocator<trackInfo> >" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator = { "vector<trackInfo,allocator<trackInfo> >::iterator" , 99 , -1 };
G__linked_taginfo G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<trackInfo,allocator<trackInfo> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableBaccRootConverterEvent_dict() {
  G__BaccRootConverterEvent_dictLN_TClass.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_TBuffer.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_TMemberInspector.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_TObject.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_string.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_volumeInfo.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_primaryParticleInfo.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_stepInfo.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_trackInfo.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator.tagnum = -1 ;
  G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableBaccRootConverterEvent_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_string);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_volumeInfo),sizeof(volumeInfo),-1,262144,(char*)NULL,G__setup_memvarvolumeInfo,G__setup_memfuncvolumeInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_primaryParticleInfo),sizeof(primaryParticleInfo),-1,262144,(char*)NULL,G__setup_memvarprimaryParticleInfo,G__setup_memfuncprimaryParticleInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_stepInfo),sizeof(stepInfo),-1,262144,(char*)NULL,G__setup_memvarstepInfo,G__setup_memfuncstepInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_trackInfo),sizeof(trackInfo),-1,262144,(char*)NULL,G__setup_memvartrackInfo,G__setup_memfunctrackInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgR),sizeof(vector<stepInfo,allocator<stepInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEstepInfocOallocatorlEstepInfogRsPgR,G__setup_memfuncvectorlEstepInfocOallocatorlEstepInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEstepInfocOallocatorlEstepInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_BaccRootConverterEvent),sizeof(BaccRootConverterEvent),-1,291072,(char*)NULL,G__setup_memvarBaccRootConverterEvent,G__setup_memfuncBaccRootConverterEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR),sizeof(vector<volumeInfo,allocator<volumeInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR,G__setup_memfuncvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEvolumeInfocOallocatorlEvolumeInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR),sizeof(vector<primaryParticleInfo,allocator<primaryParticleInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR,G__setup_memfuncvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEprimaryParticleInfocOallocatorlEprimaryParticleInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgR),sizeof(vector<trackInfo,allocator<trackInfo> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtrackInfocOallocatorlEtrackInfogRsPgR,G__setup_memfuncvectorlEtrackInfocOallocatorlEtrackInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_vectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__BaccRootConverterEvent_dictLN_reverse_iteratorlEvectorlEtrackInfocOallocatorlEtrackInfogRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupBaccRootConverterEvent_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupBaccRootConverterEvent_dict()");
  G__set_cpp_environmentBaccRootConverterEvent_dict();
  G__cpp_setup_tagtableBaccRootConverterEvent_dict();

  G__cpp_setup_inheritanceBaccRootConverterEvent_dict();

  G__cpp_setup_typetableBaccRootConverterEvent_dict();

  G__cpp_setup_memvarBaccRootConverterEvent_dict();

  G__cpp_setup_memfuncBaccRootConverterEvent_dict();
  G__cpp_setup_globalBaccRootConverterEvent_dict();
  G__cpp_setup_funcBaccRootConverterEvent_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncBaccRootConverterEvent_dict();
  return;
}
class G__cpp_setup_initBaccRootConverterEvent_dict {
  public:
    G__cpp_setup_initBaccRootConverterEvent_dict() { G__add_setup_func("BaccRootConverterEvent_dict",(G__incsetup)(&G__cpp_setupBaccRootConverterEvent_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initBaccRootConverterEvent_dict() { G__remove_setup_func("BaccRootConverterEvent_dict"); }
};
G__cpp_setup_initBaccRootConverterEvent_dict G__cpp_setup_initializerBaccRootConverterEvent_dict;

